---
layout: doc_ru
title: Спецификации
previous: Глобальные переменные
previous_url: ruby/global-variables
next: RubySpec
next_url: specs/rubyspec
---

Для управления процессом разработки в проекте Rubinius активно используются
исполняемые спецификации в стиле [TDD][1]/[BDD][2]. Директория `spec` проекта не
без умысла разделена на две части:

  1. файлы в `spec/ruby` --- описывают поведение традиционной реализации
     от Мацумото;
  2. все остальные файлы в директории `spec` --- описывают поведение Rubinius.

Спеки[<sup>1</sup>](#spec) в `spec/ruby` --- это копия RubySpec
соответствующей ревизии. Они регулярно импортируются из проекта RubySpec,
причем сбойные помечаются таким образом, что CI-процесс[<sup>2</sup>](#ci)  всегда
имеет доступ к набору проверенных валидных спецификаций. Такой подход
позволяет легко удостовериться, что изменения в коде Rubinius не ведут к
регрессиям.

Документацию по проектированию и написанию спеков можно найти на сайте
[<<RubySpec project>>][3].

Когда Вы станете писать для Rubinius спеки и соответствующий им код, соблюдайте следующий
порядок:

  1. Напишите <<сбойный>> спек для определенного поведения Ruby. Закоммитьте
     его в отдельный коммит в подходящем месте в `spec/ruby`.
  2. Создайте код для Rubinius, при выполнении которого спек <<пойдет>>. Затем
     снова закоммитьте: этот коммит должен быть отличным от первого,
     содержащего сам спек.
  3. Запустите `rake`, чтобы убедиться, что все CI-спеки выполняются успешно.

Изменения в файлах дерева `spec/ruby` регулярно отправляются нами в RubySpec.
В то же время свежие обновления, которые присылаются в RubySpec разработчиками
других реализаций Ruby, регулярно вносятся в `spec/ruby`. Так же,
соответственно обновлениям RubySpec, обновляются и теги в CI.


#### Примечания
1. _Спек_{: #spec} -- от сокр. англ. <<spec>>, спецификация.
2. _CI_{: #ci} -- утилита системы верификации (проверки) спеков.
 



[1]: http://ru.wikipedia.org/wiki/%D0%A0%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%BA%D0%B0_%D1%87%D0%B5%D1%80%D0%B5%D0%B7_%D1%82%D0%B5%D1%81%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5 "Разработка через тестирование"
[2]: http://en.wikipedia.org/wiki/Behavior_Driven_Development "Разработка через определение поведения"
[3]: http://rubyspec.org
