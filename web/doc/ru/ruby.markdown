---
layout: doc_ru
title: Ruby
previous: Стиль программирования
previous_url: contributing/style-guide
next: Скрипты
next_url: ruby/scripts
review: true
---

Один из способов приблизиться к пониманию Rubinius-реализации языка Ruby ---
это умение разобраться в том, как устроены базовые элементы самого Ruby. Смысл
настоящей статьи --- представить особенности Rubinius на примере понятий
Ruby, которые, как ожидается, уже известны нашему читателю. В документации
Rubinius мы предполагаем, что Вы знакомы либо с Ruby, либо с принципами работы
компиляторов и виртуальных машин.

В центр каждого из последующих разделов поставлено понятие
_области видимости_. В синтаксисе Ruby область видимости --- это, как правило,
производное понятие. Иначе говоря, в языке нет синтаксических элементов,
первоначально отвечающих за ограничение или обозначение области видимости.
Из-за этого разговор о видимости может оказаться весьма путаным. Возьмем, к
примеру, обыкновенное определение метода:

    a = 5

    def diligent(a)
      puts a * 2
    end

Здесь метод `#diligent` сообщает нам имя, по которому можно сослаться на
вычисление `puts a * 2`. Однако метод также определяет замкнутый лексический
контекст, область видимости, для переменной `a`. Область замкнута, поскольку
`a = 5` строкой выше не имеет никакого отношения к переменной `a` в
`#diligent`.

Принято считать, что в Ruby все сущности --- объекты. Это не совсем так. В
Ruby _большинство_ сущностей являются объектами, тогда как некоторые вещи,
исключительно важные для работы кода, вовсе не есть доступные для манипуляции
объекты.  Более того, какие именно из этих сущностей среды выполнения
программы являются объектами Ruby, кардинально зависит от конкретной
реализации. Область видимости --- одна из таких сущностей.

По существу, область видимости как идея --- это контекст, в котором возможны
ответы на вопросы из ряда: <<Каково сейчас значение `self`?>> <<Какие
переменные сейчас локальны?>> <<Какое значение константа `APPLE` будет иметь
вот в этой точке кода?>>

Каждый из последующих элементов Ruby обсуждается с точки зрения их реализации
в Rubinius и того, каким образом принцип видимости в этом участвует.

1. [Скрипты](/doc/ru/ruby/scripts/)
2. [Методы](/doc/ru/ruby/methods/)
3. [Константы](/doc/ru/ruby/constants/)
4. [Классы и модули](/doc/ru/ruby/classes-and-modules/)
5. [Блоки и процедуры](/doc/ru/ruby/blocks-and-procs/)
6. [Локальные переменные](/doc/ru/ruby/local-variables/)
7. [Переменные экземпляра](/doc/ru/ruby/instance-variables/)
8. [Переменные класса](/doc/ru/ruby/class-variables/)
9. [Глобальные переменные](/doc/ru/ruby/global-variables/)
