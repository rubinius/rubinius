/* C code produced by gperf version 2.7.2 */
/* Command-line: gperf -p -j1 -i 1 -g -o -t -N rb_reserved_word -k'1,3,$' ./keywords  */
struct kwtable {
  int id[2];
  enum lex_state_e state;
  char name[16];
};

#define TOTAL_KEYWORDS 40
#define MIN_WORD_LENGTH 2
#define MAX_WORD_LENGTH 8
#define MIN_HASH_VALUE 6
#define MAX_HASH_VALUE 55
/* maximum key range = 50, duplicates = 0 */

#ifdef __GNUC__
__inline
#else
#ifdef __cplusplus
inline
#endif
#endif
static unsigned int
hash (register const char *str, register unsigned int len)
{
  static const unsigned char asso_values[] =
    {
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 11, 56, 56, 36, 56,  1, 37,
      31,  1, 56, 56, 56, 56, 29, 56,  1, 56,
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56,  1, 56, 32,  1,  2,
       1,  1,  4, 23, 56, 17, 56, 20,  9,  2,
       9, 26, 14, 56,  5,  1,  1, 16, 56, 21,
      20,  9, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56, 56, 56, 56, 56, 56,
      56, 56, 56, 56, 56, 56
    };
  register int hval = len;

  switch (hval)
    {
      default:
      case 3:
        hval += asso_values[(unsigned char)str[2]];
      case 2:
      case 1:
        hval += asso_values[(unsigned char)str[0]];
        break;
    }
  return hval + asso_values[(unsigned char)str[len - 1]];
}

#ifdef __GNUC__
__inline
#endif
const struct kwtable *
mel_reserved_word (register const char *str, register unsigned int len)
{
  static const struct kwtable wordlist[] =
    {
      {{0, 0}}, {{0, 0}}, {{0, 0}}, {{0, 0}}, {{0, 0}}, {{0, 0}},
      {{kEND, kEND}, EXPR_END, "end"},
      {{kELSE, kELSE}, EXPR_BEG, "else"},
      {{kCASE, kCASE}, EXPR_BEG, "case"},
      {{kENSURE, kENSURE}, EXPR_BEG, "ensure"},
      {{kMODULE, kMODULE}, EXPR_BEG, "module"},
      {{kELSIF, kELSIF}, EXPR_BEG, "elsif"},
      {{kDEF, kDEF}, EXPR_FNAME, "def"},
      {{kRESCUE, kRESCUE_MOD}, EXPR_MID, "rescue"},
      {{kNOT, kNOT}, EXPR_BEG, "not"},
      {{kTHEN, kTHEN}, EXPR_BEG, "then"},
      {{kYIELD, kYIELD}, EXPR_ARG, "yield"},
      {{kFOR, kFOR}, EXPR_BEG, "for"},
      {{kSELF, kSELF}, EXPR_END, "self"},
      {{kFALSE, kFALSE}, EXPR_END, "false"},
      {{kRETRY, kRETRY}, EXPR_END, "retry"},
      {{kRETURN, kRETURN}, EXPR_MID, "return"},
      {{kTRUE, kTRUE}, EXPR_END, "true"},
      {{kIF, kIF_MOD}, EXPR_BEG, "if"},
      {{kDEFINED, kDEFINED}, EXPR_ARG, "defined?"},
      {{kSUPER, kSUPER}, EXPR_ARG, "super"},
      {{kUNDEF, kUNDEF}, EXPR_FNAME, "undef"},
      {{kBREAK, kBREAK}, EXPR_MID, "break"},
      {{kIN, kIN}, EXPR_BEG, "in"},
      {{kDO, kDO}, EXPR_BEG, "do"},
      {{kNIL, kNIL}, EXPR_END, "nil"},
      {{kUNTIL, kUNTIL_MOD}, EXPR_BEG, "until"},
      {{kUNLESS, kUNLESS_MOD}, EXPR_BEG, "unless"},
      {{kOR, kOR}, EXPR_BEG, "or"},
      {{kNEXT, kNEXT}, EXPR_MID, "next"},
      {{kWHEN, kWHEN}, EXPR_BEG, "when"},
      {{kREDO, kREDO}, EXPR_END, "redo"},
      {{kAND, kAND}, EXPR_BEG, "and"},
      {{kBEGIN, kBEGIN}, EXPR_BEG, "begin"},
      {{k__LINE__, k__LINE__}, EXPR_END, "__LINE__"},
      {{kCLASS, kCLASS}, EXPR_CLASS, "class"},
      {{k__FILE__, k__FILE__}, EXPR_END, "__FILE__"},
      {{klEND, klEND}, EXPR_END, "END"},
      {{klBEGIN, klBEGIN}, EXPR_END, "BEGIN"},
      {{kWHILE, kWHILE_MOD}, EXPR_BEG, "while"},
      {{0, 0}}, {{0, 0}}, {{0, 0}}, {{0, 0}}, {{0, 0}},
      {{0, 0}}, {{0, 0}}, {{0, 0}}, {{0, 0}}, {{0, 0}},
      {{kALIAS, kALIAS}, EXPR_FNAME, "alias"}
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      register int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= 0)
        {
          register const char *s = wordlist[key].name;

          if (*str == *s && !strcmp (str + 1, s + 1))
            return &wordlist[key];
        }
    }
  return 0;
}
