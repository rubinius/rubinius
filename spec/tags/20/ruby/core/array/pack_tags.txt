fails:Array#pack sequentially processes each pack format, which consumes element in the array, and finally concatenates their result
fails:Array#pack ignores white spaces
fails:Array#pack returns a untrusted string when the format is untrusted
fails:Array#pack returns a untrusted string when the format is untrusted even if the given format is empty
fails:Array#pack returns a untrusted string when a pack argument is untrusted
fails:Array#pack returns a trusted string even if the array is untrusted
fails:Array#pack returns a string in encoding of common to the concatenated results
fails:Array#pack with the empty format returns an empty String in US-ASCII
fails:Array#pack with format 'A' treats a multibyte character just as a byte sequence
fails:Array#pack with format 'A' returns result in ASCII-8BIT
fails:Array#pack with format 'A' cuts byte sequence even if it breaks a multibyte character
fails:Array#pack with format 'a' treats a multibyte character just as a byte sequence
fails:Array#pack with format 'a' returns result in ASCII-8BIT
fails:Array#pack with format 'a' cuts byte sequence even if it breaks a multibyte character
fails:Array#pack with format 'Z' treats a multibyte character just as a byte sequence
fails:Array#pack with format 'Z' returns result in ASCII-8BIT
fails:Array#pack with format 'Z' cuts byte sequence even if it breaks a multibyte character
fails:Array#pack with format 'B' returns packed bit-string descending order
fails:Array#pack with format 'B' conversion edge case: all zeros
fails:Array#pack with format 'B' conversion edge case: all ones
fails:Array#pack with format 'B' conversion edge case: left one
fails:Array#pack with format 'B' conversion edge case: right one
fails:Array#pack with format 'B' conversion edge case: edge sequences not in first char
fails:Array#pack with format 'B' returns zero-char for each 2 of count that greater than string length
fails:Array#pack with format 'B' returns extra zero char if count is odd and greater than string length
fails:Array#pack with format 'B' starts new char if string is ended before char's 8 bits
fails:Array#pack with format 'B' returns empty string if count = 0
fails:Array#pack with format 'B' returns an ASCII-8BIT string
fails:Array#pack with format 'b' returns packed bit-string descending order
fails:Array#pack with format 'b' conversion edge case: all zeros
fails:Array#pack with format 'b' conversion edge case: all ones
fails:Array#pack with format 'b' conversion edge case: left one
fails:Array#pack with format 'b' conversion edge case: right one
fails:Array#pack with format 'b' conversion edge case: edge sequences not in first char
fails:Array#pack with format 'b' returns zero-char for each 2 of count that greater than string length
fails:Array#pack with format 'b' returns extra zero char if count is odd and greater than string length
fails:Array#pack with format 'b' starts new char if argument string is ended before char's 8 bits
fails:Array#pack with format 'b' returns empty string if count = 0
fails:Array#pack with format 'b' returns an ASCII-8BIT string
fails:Array#pack with format 'H' encodes hexadecimal digits to byte sequence in the order of high-nibble first
fails:Array#pack with format 'H' ignores rest of the pack argument when the argument is too long
fails:Array#pack with format 'H' fills low-nibble of the last byte with 0 when count is odd
fails:Array#pack with format 'H' fills the rest bytes with 0 if pack argument has insufficient length
fails:Array#pack with format 'H' fills low-nibble of the last byte with 0 when count is odd even if pack argument has insufficient length
fails:Array#pack with format 'H' returns the whole argument string with star parameter
fails:Array#pack with format 'H' consumes only one array item per a format
fails:Array#pack with format 'H' returns an ASCII-8BIT string
fails:Array#pack with format 'h' encodes hexadecimal digits to byte sequence in the order of low-nibble first
fails:Array#pack with format 'h' ignores rest of the pack argument when the argument is too long
fails:Array#pack with format 'h' fills low-nibble of the last byte with 0 when count is odd
fails:Array#pack with format 'h' fills the rest bytes with 0 if pack argument has insufficient length
fails:Array#pack with format 'h' fills high-nibble of the last byte with 0 when count is odd even if pack argument has insufficient length
fails:Array#pack with format 'h' returns the whole argument string with star parameter
fails:Array#pack with format 'h' consumes only one array item per a format
fails:Array#pack with format 'h' returns an ASCII-8BIT string
fails:Array#pack with format 'C' returns a string with byte of appropriate number
fails:Array#pack with format 'C' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'C' reduces value to fit in byte
fails:Array#pack with format 'C' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'C' processes count number of array elements if count given
fails:Array#pack with format 'C' returns empty string if count = 0
fails:Array#pack with format 'C' with star parameter processes all remaining array items
fails:Array#pack with format 'C' returns an ASCII-8BIT string
fails:Array#pack with format 'c' returns a string with byte of appropriate number
fails:Array#pack with format 'c' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'c' reduces value to fit in byte
fails:Array#pack with format 'c' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'c' processes count number of array elements if count given
fails:Array#pack with format 'c' returns empty string if count = 0
fails:Array#pack with format 'c' with star parameter processes all remaining array items
fails:Array#pack with format 'c' returns an ASCII-8BIT string
fails:Array#pack with format 'n' returns a string containing 2 bytes for an integer
fails:Array#pack with format 'n' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'n' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'n' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'n' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'n' does not raise a RangeError even when a pack argument is >= 2**32
fails:Array#pack with format 'n' does not raise a RangeError even when a pack argument is <= -2**32
fails:Array#pack with format 'n' processes count number of array elements if count given
fails:Array#pack with format 'n' returns empty string if count = 0
fails:Array#pack with format 'n' with star parameter processes all remaining array items
fails:Array#pack with format 'n' returns an ASCII-8BIT string
fails:Array#pack with format 'v' returns a string containing 2 bytes for an integer
fails:Array#pack with format 'v' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'v' drops higher bytes when a pack argument is >= 2**16
fails:Array#pack with format 'v' drops higher bytes when a pack argument is < -2**16
fails:Array#pack with format 'v' does not raise a RangeError even when a pack argument is >= 2**32
fails:Array#pack with format 'v' does not raise a RangeError even when a pack argument is <= -2**32
fails:Array#pack with format 'v' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'v' processes count number of array elements if count given
fails:Array#pack with format 'v' returns empty string if count = 0
fails:Array#pack with format 'v' with star parameter processes all remaining array items
fails:Array#pack with format 'v' returns an ASCII-8BIT string
fails:Array#pack with format 'N' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'N' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'N' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'N' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'N' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'N' processes count number of array elements if count given
fails:Array#pack with format 'N' returns empty string if count = 0
fails:Array#pack with format 'N' with star parameter processes all remaining array items
fails:Array#pack with format 'N' returns an ASCII-8BIT string
fails:Array#pack with format 'V' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'V' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'V' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'V' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'V' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'V' processes count number of array elements if count given
fails:Array#pack with format 'V' returns empty string if count = 0
fails:Array#pack with format 'V' with star parameter processes all remaining array items
fails:Array#pack with format 'V' returns an ASCII-8BIT string
fails:Array#pack with format 's' returns a string containing 2 bytes for an integer
fails:Array#pack with format 's' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 's' drops higher bytes when a pack argument is >= 2**16
fails:Array#pack with format 's' drops higher bytes when a pack argument is < -2**16
fails:Array#pack with format 's' does not raise a RangeError even when a pack argument is >= 2**32
fails:Array#pack with format 's' does not raise a RangeError even when a pack argument is <= -2**32
fails:Array#pack with format 's' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 's' processes count number of array elements if count given
fails:Array#pack with format 's' returns empty string if count = 0
fails:Array#pack with format 's' with star parameter processes all remaining array items
fails:Array#pack with format 's' returns an ASCII-8BIT string
fails:Array#pack with format 'S' returns a string containing 2 bytes for an integer
fails:Array#pack with format 'S' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'S' drops higher bytes when a pack argument is >= 2**16
fails:Array#pack with format 'S' drops higher bytes when a pack argument is < -2**16
fails:Array#pack with format 'S' does not raise a RangeError even when a pack argument is >= 2**32
fails:Array#pack with format 'S' does not raise a RangeError even when a pack argument is <= -2**32
fails:Array#pack with format 'S' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'S' processes count number of array elements if count given
fails:Array#pack with format 'S' returns empty string if count = 0
fails:Array#pack with format 'S' with star parameter processes all remaining array items
fails:Array#pack with format 'S' returns an ASCII-8BIT string
fails:Array#pack with format 'l' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'l' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'l' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'l' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'l' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'l' processes count number of array elements if count given
fails:Array#pack with format 'l' returns empty string if count = 0
fails:Array#pack with format 'l' with star parameter processes all remaining array items
fails:Array#pack with format 'l' returns an ASCII-8BIT string
fails:Array#pack with format 'L' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'L' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'L' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'L' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'L' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'L' processes count number of array elements if count given
fails:Array#pack with format 'L' returns empty string if count = 0
fails:Array#pack with format 'L' with star parameter processes all remaining array items
fails:Array#pack with format 'L' returns an ASCII-8BIT string
fails:Array#pack with format 'q' returns a string containing 8 bytes for an integer
fails:Array#pack with format 'q' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'q' drops higher bytes when a pack argument is >= 2**64
fails:Array#pack with format 'q' drops higher bytes when a pack argument is < -2**64
fails:Array#pack with format 'q' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'q' processes count number of array elements if count given
fails:Array#pack with format 'q' returns empty string if count = 0
fails:Array#pack with format 'q' with star parameter processes all remaining array items
fails:Array#pack with format 'q' returns an ASCII-8BIT string
fails:Array#pack with format 'Q' returns a string containing 8 bytes for an integer
fails:Array#pack with format 'Q' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'Q' drops higher bytes when a pack argument is >= 2**64
fails:Array#pack with format 'Q' drops higher bytes when a pack argument is < -2**64
fails:Array#pack with format 'Q' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'Q' processes count number of array elements if count given
fails:Array#pack with format 'Q' returns empty string if count = 0
fails:Array#pack with format 'Q' with star parameter processes all remaining array items
fails:Array#pack with format 'Q' returns an ASCII-8BIT string
fails:Array#pack with format 's!' returns a string containing 2 bytes for an integer
fails:Array#pack with format 's!' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 's!' drops higher bytes when a pack argument is >= 2**16
fails:Array#pack with format 's!' drops higher bytes when a pack argument is < -2**16
fails:Array#pack with format 's!' does not raise a RangeError even when a pack argument is >= 2**32
fails:Array#pack with format 's!' does not raise a RangeError even when a pack argument is <= -2**32
fails:Array#pack with format 's!' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 's!' processes count number of array elements if count given
fails:Array#pack with format 's!' returns empty string if count = 0
fails:Array#pack with format 's!' with star parameter processes all remaining array items
fails:Array#pack with format 's!' returns an ASCII-8BIT string
fails:Array#pack with format 's_' returns a string containing 2 bytes for an integer
fails:Array#pack with format 's_' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 's_' drops higher bytes when a pack argument is >= 2**16
fails:Array#pack with format 's_' drops higher bytes when a pack argument is < -2**16
fails:Array#pack with format 's_' does not raise a RangeError even when a pack argument is >= 2**32
fails:Array#pack with format 's_' does not raise a RangeError even when a pack argument is <= -2**32
fails:Array#pack with format 's_' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 's_' processes count number of array elements if count given
fails:Array#pack with format 's_' returns empty string if count = 0
fails:Array#pack with format 's_' with star parameter processes all remaining array items
fails:Array#pack with format 's_' returns an ASCII-8BIT string
fails:Array#pack with format 'S!' returns a string containing 2 bytes for an integer
fails:Array#pack with format 'S!' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'S!' drops higher bytes when a pack argument is >= 2**16
fails:Array#pack with format 'S!' drops higher bytes when a pack argument is < -2**16
fails:Array#pack with format 'S!' does not raise a RangeError even when a pack argument is >= 2**32
fails:Array#pack with format 'S!' does not raise a RangeError even when a pack argument is <= -2**32
fails:Array#pack with format 'S!' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'S!' processes count number of array elements if count given
fails:Array#pack with format 'S!' returns empty string if count = 0
fails:Array#pack with format 'S!' with star parameter processes all remaining array items
fails:Array#pack with format 'S!' returns an ASCII-8BIT string
fails:Array#pack with format 'S_' returns a string containing 2 bytes for an integer
fails:Array#pack with format 'S_' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'S_' drops higher bytes when a pack argument is >= 2**16
fails:Array#pack with format 'S_' drops higher bytes when a pack argument is < -2**16
fails:Array#pack with format 'S_' does not raise a RangeError even when a pack argument is >= 2**32
fails:Array#pack with format 'S_' does not raise a RangeError even when a pack argument is <= -2**32
fails:Array#pack with format 'S_' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'S_' processes count number of array elements if count given
fails:Array#pack with format 'S_' returns empty string if count = 0
fails:Array#pack with format 'S_' with star parameter processes all remaining array items
fails:Array#pack with format 'S_' returns an ASCII-8BIT string
fails:Array#pack with format 'i' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'i' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'i' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'i' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'i' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'i' processes count number of array elements if count given
fails:Array#pack with format 'i' returns empty string if count = 0
fails:Array#pack with format 'i' with star parameter processes all remaining array items
fails:Array#pack with format 'i' returns an ASCII-8BIT string
fails:Array#pack with format 'i!' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'i!' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'i!' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'i!' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'i!' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'i!' processes count number of array elements if count given
fails:Array#pack with format 'i!' returns empty string if count = 0
fails:Array#pack with format 'i!' with star parameter processes all remaining array items
fails:Array#pack with format 'i!' returns an ASCII-8BIT string
fails:Array#pack with format 'i_' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'i_' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'i_' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'i_' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'i_' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'i_' processes count number of array elements if count given
fails:Array#pack with format 'i_' returns empty string if count = 0
fails:Array#pack with format 'i_' with star parameter processes all remaining array items
fails:Array#pack with format 'i_' returns an ASCII-8BIT string
fails:Array#pack with format 'I' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'I' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'I' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'I' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'I' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'I' processes count number of array elements if count given
fails:Array#pack with format 'I' returns empty string if count = 0
fails:Array#pack with format 'I' with star parameter processes all remaining array items
fails:Array#pack with format 'I' returns an ASCII-8BIT string
fails:Array#pack with format 'I!' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'I!' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'I!' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'I!' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'I!' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'I!' processes count number of array elements if count given
fails:Array#pack with format 'I!' returns empty string if count = 0
fails:Array#pack with format 'I!' with star parameter processes all remaining array items
fails:Array#pack with format 'I!' returns an ASCII-8BIT string
fails:Array#pack with format 'I_' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'I_' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'I_' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'I_' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'I_' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'I_' processes count number of array elements if count given
fails:Array#pack with format 'I_' returns empty string if count = 0
fails:Array#pack with format 'I_' with star parameter processes all remaining array items
fails:Array#pack with format 'I_' returns an ASCII-8BIT string
fails:Array#pack with format 'l!' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'l!' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'l!' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'l!' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'l!' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'l!' processes count number of array elements if count given
fails:Array#pack with format 'l!' returns empty string if count = 0
fails:Array#pack with format 'l!' with star parameter processes all remaining array items
fails:Array#pack with format 'l!' returns an ASCII-8BIT string
fails:Array#pack with format 'l_' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'l_' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'l_' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'l_' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'l_' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'l_' processes count number of array elements if count given
fails:Array#pack with format 'l_' returns empty string if count = 0
fails:Array#pack with format 'l_' with star parameter processes all remaining array items
fails:Array#pack with format 'l_' returns an ASCII-8BIT string
fails:Array#pack with format 'L!' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'L!' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'L!' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'L!' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'L!' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'L!' processes count number of array elements if count given
fails:Array#pack with format 'L!' returns empty string if count = 0
fails:Array#pack with format 'L!' with star parameter processes all remaining array items
fails:Array#pack with format 'L!' returns an ASCII-8BIT string
fails:Array#pack with format 'L_' returns a string containing 4 bytes for an integer
fails:Array#pack with format 'L_' drops higher bytes when a pack argument is >= 2**32
fails:Array#pack with format 'L_' drops higher bytes when a pack argument is < -2**32
fails:Array#pack with format 'L_' regards negative values as 2's complement in order to converts it to positive
fails:Array#pack with format 'L_' tries to convert the pack argument to an Integer using #to_int
fails:Array#pack with format 'L_' processes count number of array elements if count given
fails:Array#pack with format 'L_' returns empty string if count = 0
fails:Array#pack with format 'L_' with star parameter processes all remaining array items
fails:Array#pack with format 'L_' returns an ASCII-8BIT string
fails:Array#pack with format 'f' returns a ASCII-8BIT string
fails:Array#pack with format 'f' accepts the positive zero
fails:Array#pack with format 'f' accepts the negative zero
fails:Array#pack with format 'f' accepts a positive value
fails:Array#pack with format 'f' accepts a negative value
fails:Array#pack with format 'f' accepts the positive infinity
fails:Array#pack with format 'f' accepts the negative infinity
fails:Array#pack with format 'd' returns a ASCII-8BIT string
fails:Array#pack with format 'd' accepts the positive zero
fails:Array#pack with format 'd' accepts the negative zero
fails:Array#pack with format 'd' accepts a positive value
fails:Array#pack with format 'd' accepts a negative value
fails:Array#pack with format 'd' accepts the positive infinity
fails:Array#pack with format 'd' accepts the negative infinity
fails:Array#pack with format 'e' returns a ASCII-8BIT string
fails:Array#pack with format 'e' accepts the positive zero
fails:Array#pack with format 'e' accepts the negative zero
fails:Array#pack with format 'e' accepts a positive value
fails:Array#pack with format 'e' accepts a negative value
fails:Array#pack with format 'e' accepts the positive infinity
fails:Array#pack with format 'e' accepts the negative infinity
fails:Array#pack with format 'E' returns a ASCII-8BIT string
fails:Array#pack with format 'E' accepts the positive zero
fails:Array#pack with format 'E' accepts the negative zero
fails:Array#pack with format 'E' accepts a positive value
fails:Array#pack with format 'E' accepts a negative value
fails:Array#pack with format 'E' accepts the positive infinity
fails:Array#pack with format 'E' accepts the negative infinity
fails:Array#pack with format 'g' returns a ASCII-8BIT string
fails:Array#pack with format 'g' accepts the positive zero
fails:Array#pack with format 'g' accepts the negative zero
fails:Array#pack with format 'g' accepts a positive value
fails:Array#pack with format 'g' accepts a negative value
fails:Array#pack with format 'g' accepts the positive infinity
fails:Array#pack with format 'g' accepts the negative infinity
fails:Array#pack with format 'G' returns a ASCII-8BIT string
fails:Array#pack with format 'G' accepts the positive zero
fails:Array#pack with format 'G' accepts the negative zero
fails:Array#pack with format 'G' accepts a positive value
fails:Array#pack with format 'G' accepts a negative value
fails:Array#pack with format 'G' accepts the positive infinity
fails:Array#pack with format 'G' accepts the negative infinity
fails:Array#pack with format 'M' returns an US-ASCII string
fails:Array#pack with format 'm' does not append newline if line length parameter is 0
fails:Array#pack with format 'm' returns an US-ASCII string
fails:Array#pack with format 'U' regards a integer as a Unicode codepoint and encodes into UTF-8 byte sequence
fails:Array#pack with format 'U' returns a UTF-8 string
fails:Array#pack with format 'u' returns an US-ASCII string
fails:Array#pack with format 'w' converts to BER-compressed integer
fails:Array#pack with format 'w' calls to_int on non-integer values before packing
fails:Array#pack with format 'w' returns an ASCII-8BIT string
fails:Array#pack with format 'X' returns an ASCII 8-bit String
fails:Array#pack with format 'X' doesn't care if it breaks a character
fails:Array#pack with '@' moves the end of result string into the specified position by offset from head
fails:Array#pack with '@' fills blank with NUL bytes if the position exceeds the end of string
fails:Array#pack with '@' concatenates successing formats at the position '@' moves it into
fails:Array#pack with '@' does not recover lost bytes when shorten the string and then extends it again
fails:Array#pack with '@' is able to work with 'X'
fails:Array#pack with '@' returns a String in ASCII 8-bit
fails:Array#pack with '@' doesn't care even if breaks a character
fails:Array#pack with format 'x' returns an US-ASCII string
fails:String#unpack with 'w' directive produces a BER-compressed integer
